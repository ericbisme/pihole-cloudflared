apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pihole-cloudflared.fullname" . }}
  labels:
    {{- include "pihole-cloudflared.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "pihole-cloudflared.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "pihole-cloudflared.selectorLabels" . | nindent 8 }}
    spec:
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 1.1.1.1
          - 1.0.0.1
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "pihole-cloudflared.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: {{ template "pihole-cloudflared.fullname" . }}-pihole
          persistentVolumeClaim:
            claimName: {{ template "pihole-cloudflared.fullname" . }}-pihole
        - name: {{ template "pihole-cloudflared.fullname" . }}-dnsmasqd
          persistentVolumeClaim:
            claimName: {{ template "pihole-cloudflared.fullname" . }}-dnsmasqd
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.pihole.repository }}:{{ .Values.image.pihole.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: {{ template "pihole-cloudflared.fullname" . }}-pihole
            mountPath: /etc/pihole
          - name: {{ template "pihole-cloudflared.fullname" . }}-dnsmasqd
            mountPath: /etc/dnsmasqd
          ports:
          - name: http
            containerPort: {{ .Values.service.port.http }}
            protocol: TCP
          - name: https
            containerPort: {{ .Values.service.port.https }}
            protocol: TCP
          - name: dnstcp
            containerPort: {{ .Values.service.port.dns }}
            protocol: TCP
          - name: dnsudp
            containerPort: {{ .Values.service.port.dns }}
            protocol: UDP
          startupProbe:
            exec:
              command:
              - ls
              - /etc/pihole
            failureThreshold: 30
            periodSeconds: 5
          livenessProbe:
            exec:
              command:
              - ls
              - /etc/pihole
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.port.http }}
          env:
          - name: ServerIP
            value: {{ .Values.config.setupVars.IPV4_ADDRESS }}
          - name: "DNS1"
            value: "127.0.0.1#{{ .Values.service.port.dns }}{{ .Values.service.port.dns }}"
          - name: "DNS2"
            value: "127.0.0.1#{{ .Values.service.port.dns }}{{ .Values.service.port.dns }}"
          - name: "VIRTUAL_HOST"
            value: {{ .Values.virtual_host }}
          - name: TZ
            value: "America/Denver"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: {{ .Chart.Name }}-cloudflared
          image: "{{ .Values.image.cloudflared.repository }}:{{ .Values.image.cloudflared.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: {{ .Values.service.port.dns }}{{ .Values.service.port.dns }}
            protocol: TCP
          - containerPort: {{ .Values.service.port.dns }}{{ .Values.service.port.dns }}
            protocol: UDP
          env:
          - name: LOCAL_PORT
            value: "{{ .Values.service.port.dns }}{{ .Values.service.port.dns }}"
          resources:
            {{ toYaml .Values.resources | indent 12 }}
        - name: {{ .Chart.Name }}-exporter
          image: "{{ .Values.image.exporter.repository }}:{{ .Values.image.exporter.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: {{ .Values.service.port.metrics }}
            protocol: TCP
          env:
          - name: PIHOLE_HOSTNAME 
            value: "{{ .Values.exporter.pihole_hostname }}"
          - name: PIHOLE_PASSWORD
            value: "{{ .Values.exporter.pihole_password }}"
          - name: INTERVAL
            value: "{{ .Values.exporter.interval }}"
          - name: PORT
            value: "{{ .Values.exporter.port }}"
          resources:
            {{ toYaml .Values.resources | indent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
